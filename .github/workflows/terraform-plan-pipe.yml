name: Terraform Plan

on:
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'

  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  RUNNER_GITHUB_TOKEN: ${{ secrets.RUNNER_GITHUB_TOKEN }}
  GIT_AUTH_TOKEN: ${{ secrets.GIT_AUTH_TOKEN }}
  THANDI_CIDR_IPV4: ${{ secrets.THANDI_CIDR_IPV4 }}
  TF_WORKING_DIR: terraform

jobs:
  plan:
    name: 'terraform plan'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: 1.1.9

      - name: Setup github auth
        run: |
          echo ${{ secrets.GIT_AUTH_TOKEN }} > token.txt
          gh auth login --with-token < token.txt

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init -backend=true -backend-config="backend.hcl"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -var "thandi_cidr_ipv4=${{ secrets.THANDI_CIDR_IPV4 }}" -var "runner_github_token=${{ secrets.RUNNER_GITHUB_TOKEN }}" -var "git_auth_token=${{ secrets.GIT_AUTH_TOKEN }}" -var "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" -var "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Show plan in the Pull Request
        uses: actions/github-script@v7.0.1
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `
            #### Terraform Format and Style 🖌: ${{ steps.fmt.outcome }}
            #### Terraform Initialization ⚙️: ${{ steps.init.outcome }}
            #### Terraform Validation 🤖: ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan 📖: ${{ steps.plan.outcome }}
            <details><summary>Show Plan</summary>
            \n\`\`\`\n${process.env.PLAN}\n\`\`\`\n
            </details>
            *Pusher: @${{ github.actor }}, Action: ${{ github.event_name }}, Working Directory: ${{ env.TF_WORKING_DIR }}, Workflow: ${{ github.workflow }}*`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });